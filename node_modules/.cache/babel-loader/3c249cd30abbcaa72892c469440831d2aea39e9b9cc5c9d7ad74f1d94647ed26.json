{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jake Matthews\\\\Desktop\\\\Jake's Things\\\\ZK Front-End Projects\\\\Gmail Log In\\\\src\\\\containers\\\\ConfirmYoureNotARobotContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { components } from 'react-select';\nimport { useNavigate } from 'react-router-dom';\nimport { ConfirmYoureNotARobotComponent } from '../components/ConfirmYoureNotARobotComponent';\nimport useImagePreload from \"../hooks/useImagePreload\";\nimport errorImage from '../images/Daco_5575399.png';\nimport { countries, customOptions } from '../utils/addPhoneNumberDropDownOptionsObject';\nimport axios from 'axios';\nimport dropDownImageSVG from '../images/drop-down-svg.svg';\nimport { usersHomeOption } from '../utils/addPhoneNumberDropDownOptionsObject';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ConfirmYoureNotARobotContainer = _ref => {\n  _s();\n  let {\n    updateUser,\n    users,\n    userIP\n  } = _ref;\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [phoneNumberPlaceholder, setPhoneNumberPlaceholder] = useState(\"Phone Number\");\n  const [isPhoneNumberEmpty, setIsPhoneNumberEmpty] = useState(false);\n  const [isIncorrectFormat, setIsIncorrectFormat] = useState(false);\n  const [isAlreadyRegistered, setIsAlreadyRegistered] = useState(false);\n  const [matchingCountry, setMatchingCountry] = useState('');\n  const [emptyOption, setEmptyOption] = useState({\n    value: 'country.dialingCode',\n    label: 'test'\n  });\n  const navigate = useNavigate();\n\n  // Loads Error Image\n\n  const isImagePreloaded = useImagePreload(errorImage);\n\n  // Get User's Country from IP and Set SVG Based on it\n\n  useEffect(() => {\n    if (userIP) {\n      const apiKey = 'b2ef0251b1264f88ae869467dfe144d8';\n      axios.get(`https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=200.7.98.19`).then(response => {\n        const countryFromIP = response.data.country_name;\n        const matchingCountry = countries.find(country => country.name === countryFromIP);\n        if (matchingCountry) {\n          setMatchingCountry(matchingCountry);\n          setEmptyOption(usersHomeOption(matchingCountry));\n        }\n        console.log(`User's country: ${countryFromIP}`);\n      }).catch(error => {\n        console.error('Error fetching geolocation data:', error);\n      });\n    } else {\n      console.log(\"didn't work, or still waiting for IP API request\");\n    }\n  }, [userIP]);\n\n  // phoneNumber\n\n  const handlePhoneNumberClick = () => {\n    setPhoneNumberPlaceholder(\"\");\n  };\n  const handlePhoneNumberBlur = () => {\n    if (phoneNumber === \"\") {\n      setPhoneNumberPlaceholder(\"Phone Number\");\n    }\n  };\n\n  // Error Messages\n\n  const phoneNumberEmpty = () => setIsPhoneNumberEmpty(true);\n  const incorrectFormat = () => setIsIncorrectFormat(true);\n  const alreadyRegistered = () => setIsAlreadyRegistered(true);\n\n  // Handle Next Click\n\n  const handleNextClick = () => {\n    setIsPhoneNumberEmpty(false);\n    setIsIncorrectFormat(false);\n    setIsAlreadyRegistered(false);\n    if (phoneNumber === '') {\n      const phoneNumberInput = document.getElementById('phoneNumberInput');\n      phoneNumberEmpty();\n      phoneNumberInput.focus();\n    } else if (!/^[a-zA-Z0-9.]+$/.test(phoneNumber)) {\n      // Check if the phoneNumber contains unallowed characters\n      incorrectFormat();\n      console.log('correct regex');\n    } else {\n      const isPhoneNumberAlreadyRegistered = users.some(user => user.phoneNumber === phoneNumber);\n      if (isPhoneNumberAlreadyRegistered) {\n        alreadyRegistered();\n      } else {\n        updateUser({\n          phoneNumber: phoneNumber\n        });\n        setPhoneNumber('');\n        navigate('/add-recovery-email');\n      }\n    }\n  };\n\n  // Custom Components\n\n  const CustomDropdownIndicator = _ref2 => {\n    let {\n      menuIsOpen,\n      innerProps,\n      ...rest\n    } = _ref2;\n    const defaultColor = '#000';\n    return /*#__PURE__*/_jsxDEV(components.DropdownIndicator, {\n      ...innerProps,\n      ...rest,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: dropDownImageSVG,\n        alt: \"Dropdown Indicator\",\n        className: `svg dropdown-indicator ${menuIsOpen ? 'open' : ''}`,\n        style: {\n          fill: defaultColor\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Custom React Select Styles\n\n  const customStyles = {\n    menu: styles => ({\n      ...styles,\n      width: '360px'\n    }),\n    container: provided => ({\n      ...provided,\n      width: '103px',\n      marginLeft: '3px'\n    }),\n    control: (provided, state) => ({\n      ...provided,\n      height: '56.6px',\n      minHeight: '0px',\n      maxWidth: '83px',\n      border: state.selectProps.menuIsOpen ? '1px solid transparent' : 'transparent',\n      borderImage: state.selectProps.menuIsOpen ? 'linear-gradient(145deg, rgba(54,122,225,1) 48%, rgba(113,168,252,1) 100%)' : 'transparent',\n      borderImageSlice: state.selectProps.menuIsOpen ? '1' : 'transparent',\n      ':hover': {\n        cursor: 'pointer'\n      },\n      boxShadow: state.selectProps.menuIsOpen ? '0 0 0 1.5px #2684FF' : 'transparent'\n    }),\n    dropdownIndicator: (provided, state) => ({\n      ...provided,\n      width: '32.5px',\n      // Adjust the width to fit your image\n      height: '20px',\n      // Adjust the height to fit your image\n      transform: state.selectProps.menuIsOpen ? 'rotate(180deg)' : null,\n      padding: '0px',\n      justifyContent: 'center',\n      ':hover': {\n        // Add styles for hover here\n        // For example, you can change the color on hover:\n        fill: '#ff0000' // Change this to your desired color\n      },\n\n      '&.menu-is-open': {\n        // Add styles for when the menu is open here\n        // For example, you can change the color when the menu is open:\n        fill: '#00ff00' // Change this to your desired color\n      }\n    }),\n\n    indicatorSeparator: provided => ({\n      ...provided,\n      display: 'none'\n    }),\n    indicatorContainer: provided => ({\n      ...provided,\n      display: 'flex',\n      justifyContent: 'centre',\n      backGroundColor: 'red'\n    }),\n    // more styles\n    input: provided => ({\n      ...provided,\n      caretColor: 'transparent' // Hide the blinking cursor\n    }),\n\n    valueContainer: provided => ({\n      ...provided,\n      display: 'flex',\n      flexWrap: 'nowrap',\n      alignContent: 'center',\n      justifyContent: 'center',\n      flexDirection: 'row-reverse'\n    }),\n    placeholder: provided => ({\n      ...provided,\n      marginTop: '2px'\n    })\n  };\n\n  // Handle Skip\n\n  const handleSkip = () => {\n    setPhoneNumber('');\n    navigate('/review-your-account-info');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ConfirmYoureNotARobotComponent, {\n      value: phoneNumber,\n      setValue: setPhoneNumber,\n      handlePhoneNumberClick: handlePhoneNumberClick,\n      handlePhoneNumberBlur: handlePhoneNumberBlur,\n      phoneNumberPlaceholder: phoneNumberPlaceholder,\n      handleNextClick: handleNextClick,\n      handleSkip: handleSkip,\n      isPhoneNumberEmpty: isPhoneNumberEmpty,\n      isImagePreloaded: isImagePreloaded,\n      isIncorrectFormat: isIncorrectFormat,\n      isAlreadyRegistered: isAlreadyRegistered,\n      customOptions: customOptions,\n      countries: countries,\n      customStyles: customStyles,\n      userIP: userIP,\n      usersCountryFlagSVG: usersCountryFlagSVG,\n      CustomDropdownIndicator: CustomDropdownIndicator,\n      setPhoneNumber: setPhoneNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(ConfirmYoureNotARobotContainer, \"8QhYx5BjfHDju+1wXGGqVBQr8dw=\", false, function () {\n  return [useNavigate, useImagePreload];\n});\n_c = ConfirmYoureNotARobotContainer;\nvar _c;\n$RefreshReg$(_c, \"ConfirmYoureNotARobotContainer\");","map":{"version":3,"names":["React","useState","useEffect","components","useNavigate","ConfirmYoureNotARobotComponent","useImagePreload","errorImage","countries","customOptions","axios","dropDownImageSVG","usersHomeOption","jsxDEV","_jsxDEV","Fragment","_Fragment","ConfirmYoureNotARobotContainer","_ref","_s","updateUser","users","userIP","phoneNumber","setPhoneNumber","phoneNumberPlaceholder","setPhoneNumberPlaceholder","isPhoneNumberEmpty","setIsPhoneNumberEmpty","isIncorrectFormat","setIsIncorrectFormat","isAlreadyRegistered","setIsAlreadyRegistered","matchingCountry","setMatchingCountry","emptyOption","setEmptyOption","value","label","navigate","isImagePreloaded","apiKey","get","then","response","countryFromIP","data","country_name","find","country","name","console","log","catch","error","handlePhoneNumberClick","handlePhoneNumberBlur","phoneNumberEmpty","incorrectFormat","alreadyRegistered","handleNextClick","phoneNumberInput","document","getElementById","focus","test","isPhoneNumberAlreadyRegistered","some","user","CustomDropdownIndicator","_ref2","menuIsOpen","innerProps","rest","defaultColor","DropdownIndicator","children","src","alt","className","style","fill","fileName","_jsxFileName","lineNumber","columnNumber","customStyles","menu","styles","width","container","provided","marginLeft","control","state","height","minHeight","maxWidth","border","selectProps","borderImage","borderImageSlice","cursor","boxShadow","dropdownIndicator","transform","padding","justifyContent","indicatorSeparator","display","indicatorContainer","backGroundColor","input","caretColor","valueContainer","flexWrap","alignContent","flexDirection","placeholder","marginTop","handleSkip","setValue","usersCountryFlagSVG","_c","$RefreshReg$"],"sources":["C:/Users/Jake Matthews/Desktop/Jake's Things/ZK Front-End Projects/Gmail Log In/src/containers/ConfirmYoureNotARobotContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { components } from 'react-select';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ConfirmYoureNotARobotComponent } from '../components/ConfirmYoureNotARobotComponent';\r\nimport useImagePreload from \"../hooks/useImagePreload\";\r\nimport errorImage from '../images/Daco_5575399.png';\r\nimport { countries, customOptions } from '../utils/addPhoneNumberDropDownOptionsObject';\r\nimport axios from 'axios';\r\nimport dropDownImageSVG from '../images/drop-down-svg.svg';\r\nimport { usersHomeOption } from '../utils/addPhoneNumberDropDownOptionsObject';\r\n\r\nexport const ConfirmYoureNotARobotContainer = ({ updateUser, users, userIP }) => {\r\n\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [phoneNumberPlaceholder, setPhoneNumberPlaceholder] = useState(\"Phone Number\");\r\n    const [isPhoneNumberEmpty, setIsPhoneNumberEmpty] = useState(false);\r\n    const [isIncorrectFormat, setIsIncorrectFormat] = useState(false);\r\n    const [isAlreadyRegistered, setIsAlreadyRegistered] = useState(false);\r\n    const [matchingCountry, setMatchingCountry] = useState('');\r\n    const [emptyOption, setEmptyOption] = useState({\r\n        value: 'country.dialingCode',\r\n        label: 'test',\r\n    });\r\n\r\n    const navigate = useNavigate();\r\n\r\n// Loads Error Image\r\n\r\n    const isImagePreloaded = useImagePreload(errorImage);\r\n\r\n// Get User's Country from IP and Set SVG Based on it\r\n\r\n    useEffect(() => { \r\n        if (userIP) {\r\n            const apiKey = 'b2ef0251b1264f88ae869467dfe144d8';\r\n\r\n            axios.get(`https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=200.7.98.19`)\r\n            .then((response) => {\r\n                const countryFromIP = response.data.country_name;\r\n                const matchingCountry = countries.find(country => country.name === countryFromIP);\r\n                if (matchingCountry) {\r\n                    setMatchingCountry(matchingCountry);\r\n                    setEmptyOption(usersHomeOption(matchingCountry));\r\n                }\r\n                console.log(`User's country: ${countryFromIP}`);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching geolocation data:', error);\r\n            });\r\n        } else {\r\n            console.log(\"didn't work, or still waiting for IP API request\");\r\n        }\r\n    }, [userIP]);\r\n\r\n// phoneNumber\r\n\r\n    const handlePhoneNumberClick = () => {\r\n        setPhoneNumberPlaceholder(\"\");\r\n    };\r\n\r\n    const handlePhoneNumberBlur = () => {\r\n        if (phoneNumber === \"\") {\r\n            setPhoneNumberPlaceholder(\"Phone Number\");\r\n        }\r\n    };\r\n\r\n// Error Messages\r\n\r\n    const phoneNumberEmpty = () => setIsPhoneNumberEmpty(true);\r\n\r\n    const incorrectFormat = () => setIsIncorrectFormat(true);\r\n\r\n    const alreadyRegistered = () => setIsAlreadyRegistered(true);\r\n\r\n// Handle Next Click\r\n\r\n    const handleNextClick = () => {\r\n        setIsPhoneNumberEmpty(false);\r\n        setIsIncorrectFormat(false);\r\n        setIsAlreadyRegistered(false);\r\n        if (phoneNumber === '') {\r\n        const phoneNumberInput = document.getElementById('phoneNumberInput');\r\n        phoneNumberEmpty();\r\n        phoneNumberInput.focus();\r\n        } else if (!/^[a-zA-Z0-9.]+$/.test(phoneNumber)) {\r\n        // Check if the phoneNumber contains unallowed characters\r\n        incorrectFormat();\r\n        console.log('correct regex')\r\n        } else {\r\n                const isPhoneNumberAlreadyRegistered = users.some(user => user.phoneNumber === phoneNumber);\r\n                if(isPhoneNumberAlreadyRegistered) {\r\n                    alreadyRegistered();    \r\n                } else {\r\n            updateUser({ phoneNumber: phoneNumber })\r\n            setPhoneNumber('');\r\n            navigate('/add-recovery-email')\r\n            }\r\n        }\r\n    };\r\n\r\n// Custom Components\r\n\r\nconst CustomDropdownIndicator = ({ menuIsOpen, innerProps, ...rest }) => {\r\n    const defaultColor = '#000';\r\n  \r\n    return (\r\n      <components.DropdownIndicator {...innerProps} { ...rest }>\r\n        <img\r\n          src={dropDownImageSVG}\r\n          alt=\"Dropdown Indicator\"\r\n          className={`svg dropdown-indicator ${menuIsOpen ? 'open' : ''}`}\r\n          style={{ fill: defaultColor }}\r\n        />\r\n      </components.DropdownIndicator>\r\n    );\r\n  };\r\n\r\n// Custom React Select Styles\r\n\r\n    const customStyles = {\r\n        menu: styles => ({\r\n            ...styles,\r\n            width: '360px',\r\n        }),\r\n        container: provided => ({\r\n            ...provided,\r\n            width: '103px',\r\n            marginLeft: '3px',\r\n        }),\r\n        control: (provided, state) => ({\r\n            ...provided,\r\n            height: '56.6px',\r\n            minHeight: '0px',\r\n            maxWidth: '83px',\r\n            border: state.selectProps.menuIsOpen ? '1px solid transparent' : 'transparent',\r\n            borderImage: state.selectProps.menuIsOpen ? 'linear-gradient(145deg, rgba(54,122,225,1) 48%, rgba(113,168,252,1) 100%)' : 'transparent',\r\n            borderImageSlice: state.selectProps.menuIsOpen ? '1' : 'transparent',\r\n            ':hover': {\r\n                cursor: 'pointer'\r\n            },\r\n            boxShadow: state.selectProps.menuIsOpen ? '0 0 0 1.5px #2684FF' : 'transparent',\r\n        }),\r\n        dropdownIndicator: (provided, state)=> ({\r\n            ...provided,\r\n            width: '32.5px', // Adjust the width to fit your image\r\n            height: '20px', // Adjust the height to fit your image\r\n            transform: state.selectProps.menuIsOpen ? 'rotate(180deg)' : null,\r\n            padding: '0px',\r\n            justifyContent: 'center',\r\n            ':hover': {\r\n                // Add styles for hover here\r\n                // For example, you can change the color on hover:\r\n                fill: '#ff0000', // Change this to your desired color\r\n              },\r\n              '&.menu-is-open': {\r\n                // Add styles for when the menu is open here\r\n                // For example, you can change the color when the menu is open:\r\n                fill: '#00ff00', // Change this to your desired color\r\n              },\r\n        }),\r\n        indicatorSeparator: provided => ({\r\n            ...provided,\r\n            display: 'none',\r\n        }),\r\n        indicatorContainer: provided => ({\r\n            ...provided,\r\n            display: 'flex',\r\n            justifyContent: 'centre',\r\n            backGroundColor: 'red'\r\n        }),\r\n        // more styles\r\n        input: (provided) => ({\r\n            ...provided,\r\n            caretColor: 'transparent', // Hide the blinking cursor\r\n        }),\r\n        valueContainer: provided => ({\r\n            ...provided,\r\n            display: 'flex',\r\n            flexWrap: 'nowrap',\r\n            alignContent: 'center',\r\n            justifyContent: 'center',\r\n            flexDirection: 'row-reverse',\r\n        }),\r\n        placeholder: provided => ({\r\n            ...provided,\r\n            marginTop: '2px',\r\n        })\r\n    }\r\n  \r\n// Handle Skip\r\n\r\n    const handleSkip = () => {\r\n        setPhoneNumber('');\r\n        navigate('/review-your-account-info');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ConfirmYoureNotARobotComponent\r\n                value={phoneNumber}\r\n                setValue={setPhoneNumber}\r\n                handlePhoneNumberClick={handlePhoneNumberClick}\r\n                handlePhoneNumberBlur={handlePhoneNumberBlur}\r\n                phoneNumberPlaceholder={phoneNumberPlaceholder}\r\n                handleNextClick={handleNextClick}\r\n                handleSkip={handleSkip}\r\n                isPhoneNumberEmpty={isPhoneNumberEmpty}\r\n                isImagePreloaded={isImagePreloaded}\r\n                isIncorrectFormat={isIncorrectFormat}\r\n                isAlreadyRegistered={isAlreadyRegistered}\r\n                customOptions={customOptions}\r\n                countries={countries}\r\n                customStyles={customStyles}\r\n                userIP={userIP}\r\n                usersCountryFlagSVG={usersCountryFlagSVG}\r\n                CustomDropdownIndicator={CustomDropdownIndicator}\r\n                setPhoneNumber={setPhoneNumber}\r\n            />\r\n        </>\r\n    )\r\n    \r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,8BAA8B,QAAQ,8CAA8C;AAC7F,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,SAASC,SAAS,EAAEC,aAAa,QAAQ,8CAA8C;AACvF,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,SAASC,eAAe,QAAQ,8CAA8C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/E,OAAO,MAAMC,8BAA8B,GAAGC,IAAA,IAAmC;EAAAC,EAAA;EAAA,IAAlC;IAAEC,UAAU;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAAJ,IAAA;EAExE,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwB,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGzB,QAAQ,CAAC,cAAc,CAAC;EACpF,MAAM,CAAC0B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAAC4B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC8B,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACgC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACkC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC;IAC3CoC,KAAK,EAAE,qBAAqB;IAC5BC,KAAK,EAAE;EACX,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGnC,WAAW,CAAC,CAAC;;EAElC;;EAEI,MAAMoC,gBAAgB,GAAGlC,eAAe,CAACC,UAAU,CAAC;;EAExD;;EAEIL,SAAS,CAAC,MAAM;IACZ,IAAIoB,MAAM,EAAE;MACR,MAAMmB,MAAM,GAAG,kCAAkC;MAEjD/B,KAAK,CAACgC,GAAG,CAAE,6CAA4CD,MAAO,iBAAgB,CAAC,CAC9EE,IAAI,CAAEC,QAAQ,IAAK;QAChB,MAAMC,aAAa,GAAGD,QAAQ,CAACE,IAAI,CAACC,YAAY;QAChD,MAAMd,eAAe,GAAGzB,SAAS,CAACwC,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,KAAKL,aAAa,CAAC;QACjF,IAAIZ,eAAe,EAAE;UACjBC,kBAAkB,CAACD,eAAe,CAAC;UACnCG,cAAc,CAACxB,eAAe,CAACqB,eAAe,CAAC,CAAC;QACpD;QACAkB,OAAO,CAACC,GAAG,CAAE,mBAAkBP,aAAc,EAAC,CAAC;MACnD,CAAC,CAAC,CACDQ,KAAK,CAAEC,KAAK,IAAK;QACdH,OAAO,CAACG,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC5D,CAAC,CAAC;IACN,CAAC,MAAM;MACHH,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;IACnE;EACJ,CAAC,EAAE,CAAC9B,MAAM,CAAC,CAAC;;EAEhB;;EAEI,MAAMiC,sBAAsB,GAAGA,CAAA,KAAM;IACjC7B,yBAAyB,CAAC,EAAE,CAAC;EACjC,CAAC;EAED,MAAM8B,qBAAqB,GAAGA,CAAA,KAAM;IAChC,IAAIjC,WAAW,KAAK,EAAE,EAAE;MACpBG,yBAAyB,CAAC,cAAc,CAAC;IAC7C;EACJ,CAAC;;EAEL;;EAEI,MAAM+B,gBAAgB,GAAGA,CAAA,KAAM7B,qBAAqB,CAAC,IAAI,CAAC;EAE1D,MAAM8B,eAAe,GAAGA,CAAA,KAAM5B,oBAAoB,CAAC,IAAI,CAAC;EAExD,MAAM6B,iBAAiB,GAAGA,CAAA,KAAM3B,sBAAsB,CAAC,IAAI,CAAC;;EAEhE;;EAEI,MAAM4B,eAAe,GAAGA,CAAA,KAAM;IAC1BhC,qBAAqB,CAAC,KAAK,CAAC;IAC5BE,oBAAoB,CAAC,KAAK,CAAC;IAC3BE,sBAAsB,CAAC,KAAK,CAAC;IAC7B,IAAIT,WAAW,KAAK,EAAE,EAAE;MACxB,MAAMsC,gBAAgB,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;MACpEN,gBAAgB,CAAC,CAAC;MAClBI,gBAAgB,CAACG,KAAK,CAAC,CAAC;IACxB,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAACC,IAAI,CAAC1C,WAAW,CAAC,EAAE;MACjD;MACAmC,eAAe,CAAC,CAAC;MACjBP,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5B,CAAC,MAAM;MACC,MAAMc,8BAA8B,GAAG7C,KAAK,CAAC8C,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAC7C,WAAW,KAAKA,WAAW,CAAC;MAC3F,IAAG2C,8BAA8B,EAAE;QAC/BP,iBAAiB,CAAC,CAAC;MACvB,CAAC,MAAM;QACXvC,UAAU,CAAC;UAAEG,WAAW,EAAEA;QAAY,CAAC,CAAC;QACxCC,cAAc,CAAC,EAAE,CAAC;QAClBe,QAAQ,CAAC,qBAAqB,CAAC;MAC/B;IACJ;EACJ,CAAC;;EAEL;;EAEA,MAAM8B,uBAAuB,GAAGC,KAAA,IAAyC;IAAA,IAAxC;MAAEC,UAAU;MAAEC,UAAU;MAAE,GAAGC;IAAK,CAAC,GAAAH,KAAA;IAChE,MAAMI,YAAY,GAAG,MAAM;IAE3B,oBACE5D,OAAA,CAACX,UAAU,CAACwE,iBAAiB;MAAA,GAAKH,UAAU;MAAA,GAAOC,IAAI;MAAAG,QAAA,eACrD9D,OAAA;QACE+D,GAAG,EAAElE,gBAAiB;QACtBmE,GAAG,EAAC,oBAAoB;QACxBC,SAAS,EAAG,0BAAyBR,UAAU,GAAG,MAAM,GAAG,EAAG,EAAE;QAChES,KAAK,EAAE;UAAEC,IAAI,EAAEP;QAAa;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC0B,CAAC;EAEnC,CAAC;;EAEH;;EAEI,MAAMC,YAAY,GAAG;IACjBC,IAAI,EAAEC,MAAM,KAAK;MACb,GAAGA,MAAM;MACTC,KAAK,EAAE;IACX,CAAC,CAAC;IACFC,SAAS,EAAEC,QAAQ,KAAK;MACpB,GAAGA,QAAQ;MACXF,KAAK,EAAE,OAAO;MACdG,UAAU,EAAE;IAChB,CAAC,CAAC;IACFC,OAAO,EAAEA,CAACF,QAAQ,EAAEG,KAAK,MAAM;MAC3B,GAAGH,QAAQ;MACXI,MAAM,EAAE,QAAQ;MAChBC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE,MAAM;MAChBC,MAAM,EAAEJ,KAAK,CAACK,WAAW,CAAC5B,UAAU,GAAG,uBAAuB,GAAG,aAAa;MAC9E6B,WAAW,EAAEN,KAAK,CAACK,WAAW,CAAC5B,UAAU,GAAG,2EAA2E,GAAG,aAAa;MACvI8B,gBAAgB,EAAEP,KAAK,CAACK,WAAW,CAAC5B,UAAU,GAAG,GAAG,GAAG,aAAa;MACpE,QAAQ,EAAE;QACN+B,MAAM,EAAE;MACZ,CAAC;MACDC,SAAS,EAAET,KAAK,CAACK,WAAW,CAAC5B,UAAU,GAAG,qBAAqB,GAAG;IACtE,CAAC,CAAC;IACFiC,iBAAiB,EAAEA,CAACb,QAAQ,EAAEG,KAAK,MAAK;MACpC,GAAGH,QAAQ;MACXF,KAAK,EAAE,QAAQ;MAAE;MACjBM,MAAM,EAAE,MAAM;MAAE;MAChBU,SAAS,EAAEX,KAAK,CAACK,WAAW,CAAC5B,UAAU,GAAG,gBAAgB,GAAG,IAAI;MACjEmC,OAAO,EAAE,KAAK;MACdC,cAAc,EAAE,QAAQ;MACxB,QAAQ,EAAE;QACN;QACA;QACA1B,IAAI,EAAE,SAAS,CAAE;MACnB,CAAC;;MACD,gBAAgB,EAAE;QAChB;QACA;QACAA,IAAI,EAAE,SAAS,CAAE;MACnB;IACN,CAAC,CAAC;;IACF2B,kBAAkB,EAAEjB,QAAQ,KAAK;MAC7B,GAAGA,QAAQ;MACXkB,OAAO,EAAE;IACb,CAAC,CAAC;IACFC,kBAAkB,EAAEnB,QAAQ,KAAK;MAC7B,GAAGA,QAAQ;MACXkB,OAAO,EAAE,MAAM;MACfF,cAAc,EAAE,QAAQ;MACxBI,eAAe,EAAE;IACrB,CAAC,CAAC;IACF;IACAC,KAAK,EAAGrB,QAAQ,KAAM;MAClB,GAAGA,QAAQ;MACXsB,UAAU,EAAE,aAAa,CAAE;IAC/B,CAAC,CAAC;;IACFC,cAAc,EAAEvB,QAAQ,KAAK;MACzB,GAAGA,QAAQ;MACXkB,OAAO,EAAE,MAAM;MACfM,QAAQ,EAAE,QAAQ;MAClBC,YAAY,EAAE,QAAQ;MACtBT,cAAc,EAAE,QAAQ;MACxBU,aAAa,EAAE;IACnB,CAAC,CAAC;IACFC,WAAW,EAAE3B,QAAQ,KAAK;MACtB,GAAGA,QAAQ;MACX4B,SAAS,EAAE;IACf,CAAC;EACL,CAAC;;EAEL;;EAEI,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrBhG,cAAc,CAAC,EAAE,CAAC;IAClBe,QAAQ,CAAC,2BAA2B,CAAC;EACzC,CAAC;EAED,oBACIzB,OAAA,CAAAE,SAAA;IAAA4D,QAAA,eACI9D,OAAA,CAACT,8BAA8B;MAC3BgC,KAAK,EAAEd,WAAY;MACnBkG,QAAQ,EAAEjG,cAAe;MACzB+B,sBAAsB,EAAEA,sBAAuB;MAC/CC,qBAAqB,EAAEA,qBAAsB;MAC7C/B,sBAAsB,EAAEA,sBAAuB;MAC/CmC,eAAe,EAAEA,eAAgB;MACjC4D,UAAU,EAAEA,UAAW;MACvB7F,kBAAkB,EAAEA,kBAAmB;MACvCa,gBAAgB,EAAEA,gBAAiB;MACnCX,iBAAiB,EAAEA,iBAAkB;MACrCE,mBAAmB,EAAEA,mBAAoB;MACzCtB,aAAa,EAAEA,aAAc;MAC7BD,SAAS,EAAEA,SAAU;MACrB8E,YAAY,EAAEA,YAAa;MAC3BhE,MAAM,EAAEA,MAAO;MACfoG,mBAAmB,EAAEA,mBAAoB;MACzCrD,uBAAuB,EAAEA,uBAAwB;MACjD7C,cAAc,EAAEA;IAAe;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC;EAAC,gBACJ,CAAC;AAGX,CAAC;AAAAlE,EAAA,CAlNYF,8BAA8B;EAAA,QAatBb,WAAW,EAIHE,eAAe;AAAA;AAAAqH,EAAA,GAjB/B1G,8BAA8B;AAAA,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}