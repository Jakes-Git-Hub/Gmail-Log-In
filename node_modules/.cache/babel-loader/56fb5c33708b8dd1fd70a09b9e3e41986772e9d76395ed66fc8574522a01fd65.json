{"ast":null,"code":"var process = require('process');\nvar exec = require('child_process').exec;\nvar fs = require('fs');\nvar help_message = \"You must pass one argument to build-pngs. It should be target dimension in the format `200:` for width 200px, or `:200` for height 200px.\";\nvar svg_directory = 'svg/';\n\n// Check arguments\nfunction get_output_directory() {\n  // Replace : with x, if two dimensions are specified\n  var dim = process.argv[2].split(':').filter(x => x.length > 0);\n  var dir = 'png' + (dim.length > 1 ? dim.join('x') : dim) + 'px';\n  return dir;\n}\nfunction get_output_dimensions() {\n  return process.argv[2];\n}\nfunction check_arguments(callback) {\n  if (process.argv.length != 3) {\n    console.log(help_message);\n    process.exit(1);\n  }\n  var dimensions = process.argv[2];\n  if (/^[0-9]*:[0-9]*$/.test(dimensions) && dimensions.length > 2) {\n    var output_folder = get_output_directory();\n    console.log(\"Output folder: \" + output_folder);\n    if (!fs.existsSync(output_folder)) {\n      fs.mkdirSync(output_folder);\n    }\n    callback();\n  } else {\n    console.log(help_message);\n    process.exit(1);\n  }\n}\nfunction check_for_svgexport(callback) {\n  // Check for presence of imagemin-cli and svgexport\n  console.log(\"Checking if `svgexport` is available...\");\n  exec('svgexport', function (error, stdout, stderr) {\n    if (stdout.indexOf(\"Usage: svgexport\") !== -1) {\n      callback();\n    } else {\n      console.log(\"`svgexport` is not installed.\");\n      console.log(\"Please run: npm install -g svgexport\");\n      process.exit(1);\n    }\n  });\n}\nfunction check_for_imagemin(callback) {\n  // Check for presence of imagemin-cli and svgexport\n  console.log(\"Checking if `imagemin-cli` is available...\");\n  exec(\"imagemin --version\", function (error, stdout, stderr) {\n    if (!error) {\n      callback();\n    } else {\n      console.log(\"`imagemin-cli` is not installed.\");\n      console.log(\"Please run: npm install -g imagemin-cli\");\n      process.exit(1);\n    }\n  });\n}\nfunction get_all_svgs(callback) {\n  fs.readdir(svg_directory, function (err, items) {\n    if (err) {\n      console.log(\"Could not list *.svg files. You probably ran this command from the wrong working directory.\");\n      console.log(err);\n      process.exit(1);\n    }\n    items = items.filter(path => /^[a-z\\-]+\\.svg$/.test(path));\n    callback(items);\n  }, error => {});\n}\nfunction convert_and_compress_svg(path_to_svg, callback) {\n  var path_to_tmp_png = path_to_svg.substring(0, path_to_svg.length - 4) + '.png';\n  var svgexport_command = \"svgexport \" + path_to_svg + \" \" + path_to_tmp_png + \" pad \" + get_output_dimensions();\n  console.log(svgexport_command);\n  exec(svgexport_command, (error, stdout, stderr) => {\n    if (error) {\n      console.log(\"Failed to convert SVG: \" + path_to_svg);\n      process.exit(1);\n    }\n    var image_min_command = \"imagemin \" + path_to_tmp_png + \" --out-dir=\" + get_output_directory();\n    console.log(image_min_command);\n    exec(image_min_command, (error, stdout, stderr) => {\n      // Always remove temp file\n      fs.unlink(path_to_tmp_png, error => {});\n      if (error) {\n        console.log(\"Failed to convert SVG: \" + path_to_svg);\n        process.exit(1);\n      }\n      callback();\n    });\n  });\n}\nfunction convert_all_files(svgs, callback) {\n  var i = 0;\n  function do_next_file() {\n    console.log(\"Converting [\" + (i + 1) + \"/\" + svgs.length + \"] \" + svgs[i]);\n    convert_and_compress_svg(svg_directory + svgs[i], do_next_file);\n    ++i;\n    if (i >= svgs.length) {\n      callback();\n      return;\n    }\n  }\n  do_next_file();\n}\n\n// Run the program\ncheck_arguments(() => check_for_imagemin(() => check_for_svgexport(() => get_all_svgs(svgs => convert_all_files(svgs, () => {\n  console.log(\"All SVGs converted to PNG!\");\n  process.exit(0);\n})))));","map":{"version":3,"names":["process","require","exec","fs","help_message","svg_directory","get_output_directory","dim","argv","split","filter","x","length","dir","join","get_output_dimensions","check_arguments","callback","console","log","exit","dimensions","test","output_folder","existsSync","mkdirSync","check_for_svgexport","error","stdout","stderr","indexOf","check_for_imagemin","get_all_svgs","readdir","err","items","path","convert_and_compress_svg","path_to_svg","path_to_tmp_png","substring","svgexport_command","image_min_command","unlink","convert_all_files","svgs","i","do_next_file"],"sources":["C:/Users/jacma/OneDrive/Desktop/Jake's Folder/Coding Projects/Google Log In/country-flags/scripts/build-pngs.js"],"sourcesContent":["var process = require('process')\r\nvar exec = require('child_process').exec\r\nvar fs = require('fs')\r\n\r\nvar help_message = \"You must pass one argument to build-pngs. It should be target dimension in the format `200:` for width 200px, or `:200` for height 200px.\"\r\nvar svg_directory = 'svg/'\r\n\r\n// Check arguments\r\nfunction get_output_directory() {\r\n    // Replace : with x, if two dimensions are specified\r\n    var dim = process.argv[2].split(':').filter(x => x.length > 0)\r\n    var dir = 'png' + (dim.length > 1 ? dim.join('x') : dim) + 'px'\r\n\r\n    return dir\r\n}\r\n\r\nfunction get_output_dimensions() {\r\n    return process.argv[2]\r\n}\r\n\r\nfunction check_arguments(callback) {\r\n    if (process.argv.length != 3) {\r\n        console.log(help_message)\r\n        process.exit(1)\r\n    }\r\n\r\n    var dimensions = process.argv[2]\r\n    if (/^[0-9]*:[0-9]*$/.test(dimensions) && dimensions.length > 2) {\r\n        var output_folder = get_output_directory()\r\n        console.log(\"Output folder: \" + output_folder)\r\n        \r\n        if (!fs.existsSync(output_folder)){\r\n            fs.mkdirSync(output_folder)\r\n        }\r\n\r\n        callback()\r\n    }\r\n    else {\r\n        console.log(help_message)\r\n        process.exit(1)\r\n    }\r\n}\r\n\r\nfunction check_for_svgexport(callback) {\r\n    // Check for presence of imagemin-cli and svgexport\r\n    console.log(\"Checking if `svgexport` is available...\")\r\n    exec('svgexport', function(error, stdout, stderr) {\r\n        if (stdout.indexOf(\"Usage: svgexport\") !== -1) {\r\n            callback()\r\n        }\r\n        else {\r\n            console.log(\"`svgexport` is not installed.\")\r\n            console.log(\"Please run: npm install -g svgexport\")\r\n            process.exit(1)\r\n        }\r\n    })\r\n}\r\n\r\nfunction check_for_imagemin(callback) {\r\n    // Check for presence of imagemin-cli and svgexport\r\n    console.log(\"Checking if `imagemin-cli` is available...\")\r\n    exec(\"imagemin --version\", function(error, stdout, stderr) {\r\n        if (!error) {\r\n            callback()\r\n        }\r\n        else {\r\n            console.log(\"`imagemin-cli` is not installed.\")\r\n            console.log(\"Please run: npm install -g imagemin-cli\")\r\n            process.exit(1)\r\n        }\r\n    })\r\n}\r\n\r\nfunction get_all_svgs(callback) {\r\n    fs.readdir(svg_directory, function(err, items) {\r\n        if (err) {\r\n            console.log(\"Could not list *.svg files. You probably ran this command from the wrong working directory.\")\r\n            console.log(err)\r\n            process.exit(1)\r\n        }\r\n\r\n        items = items.filter(path => /^[a-z\\-]+\\.svg$/.test(path))\r\n        callback(items)\r\n    }, (error) => {})\r\n}\r\n\r\nfunction convert_and_compress_svg(path_to_svg, callback) {\r\n    var path_to_tmp_png = path_to_svg.substring(0, path_to_svg.length - 4) + '.png'\r\n    var svgexport_command = \"svgexport \" + path_to_svg + \" \" + path_to_tmp_png + \" pad \" + get_output_dimensions()\r\n    console.log(svgexport_command)\r\n    exec(svgexport_command, (error, stdout, stderr) => {\r\n        if (error) {\r\n            console.log(\"Failed to convert SVG: \" + path_to_svg)\r\n            process.exit(1)\r\n        }\r\n\r\n        var image_min_command = \"imagemin \" + path_to_tmp_png + \" --out-dir=\" + get_output_directory()\r\n        console.log(image_min_command)\r\n        exec(image_min_command, (error, stdout, stderr) => {\r\n            // Always remove temp file\r\n            fs.unlink(path_to_tmp_png, (error) => {})\r\n\r\n            if (error) {\r\n                console.log(\"Failed to convert SVG: \" + path_to_svg)\r\n                process.exit(1)\r\n            }\r\n\r\n            callback()\r\n        })\r\n    })\r\n}\r\n\r\nfunction convert_all_files(svgs, callback) {\r\n    var i = 0\r\n\r\n    function do_next_file() {\r\n        console.log(\"Converting [\" + (i+1) + \"/\" + svgs.length + \"] \" + svgs[i])\r\n        convert_and_compress_svg(svg_directory + svgs[i], do_next_file)\r\n\r\n        ++i\r\n        if (i >= svgs.length) {\r\n            callback()\r\n            return\r\n        }\r\n    }\r\n\r\n    do_next_file()\r\n}\r\n\r\n// Run the program\r\ncheck_arguments(() =>\r\n    check_for_imagemin(() =>\r\n    check_for_svgexport(() =>\r\n    get_all_svgs((svgs) => convert_all_files(svgs, () => {\r\n        console.log(\"All SVGs converted to PNG!\")\r\n        process.exit(0)\r\n    })\r\n))))\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}