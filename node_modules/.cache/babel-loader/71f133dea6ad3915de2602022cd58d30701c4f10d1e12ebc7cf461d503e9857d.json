{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jacma\\\\OneDrive\\\\Desktop\\\\Jake's Folder\\\\Coding Projects\\\\Google Log In\\\\src\\\\containers\\\\ConfirmYou'reNotARobotContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ConfirmYoureNotARobotComponent } from '../components/ConfirmYoureNotARobotComponent';\nimport useImagePreload from \"../hooks/useImagePreload\";\nimport errorImage from '../images/Daco_5575399.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ConfirmYoureNotARobotContainer = _ref => {\n  _s();\n  let {\n    updateUser,\n    users\n  } = _ref;\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [phoneNumberPlaceholder, setPhoneNumberPlaceholder] = useState(\"Phone Number\");\n  const [isPhoneNumberEmpty, setIsPhoneNumberEmpty] = useState(false);\n  const [isIncorrectFormat, setIsIncorrectFormat] = useState(false);\n  const [isAlreadyRegistered, setIsAlreadyRegistered] = useState(false);\n  const navigate = useNavigate();\n  const isImagePreloaded = useImagePreload(errorImage);\n\n  // phoneNumber\n\n  const handlePhoneNumberClick = () => {\n    setPhoneNumberPlaceholder(\"\");\n  };\n  const handlePhoneNumberBlur = () => {\n    if (phoneNumber === \"\") {\n      setPhoneNumberPlaceholder(\"Phone Number\");\n    }\n  };\n\n  // Error Messages\n\n  const phoneNumberEmpty = () => setIsPhoneNumberEmpty(true);\n  const incorrectFormat = () => setIsIncorrectFormat(true);\n  const alreadyRegistered = () => setIsAlreadyRegistered(true);\n\n  // Handle Next Click\n\n  const handleNextClick = () => {\n    setIsPhoneNumberEmpty(false);\n    setIsIncorrectFormat(false);\n    if (phoneNumber === '') {\n      const phoneNumberInput = document.getElementById('phoneNumberInput');\n      phoneNumberEmpty();\n      phoneNumberInput.focus();\n    } else if (!/^[a-zA-Z0-9.]+$/.test(phoneNumber)) {\n      // Check if the phoneNumber contains unallowed characters\n      incorrectFormat();\n      console.log('correct regex');\n    } else if (phoneNumber === users.phoneNumber) {\n      incorrectFormat();\n    } else {\n      updateUser({\n        phoneNumber: phoneNumber\n      });\n      setPhoneNumber('');\n      navigate('/next');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ConfirmYoureNotARobotComponent, {\n      phoneNumber: phoneNumber,\n      setPhoneNumber: setPhoneNumber,\n      handlePhoneNumberClick: handlePhoneNumberClick,\n      handlePhoneNumberBlur: handlePhoneNumberBlur,\n      phoneNumberPlaceholder: phoneNumberPlaceholder,\n      handleNextClick: handleNextClick,\n      isPhoneNumberEmpty: isPhoneNumberEmpty,\n      isImagePreloaded: isImagePreloaded,\n      isIncorrectFormat: isIncorrectFormat,\n      alreadyRegistered: alreadyRegistered,\n      usesUnallowedChars: usesUnallowedChars\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(ConfirmYoureNotARobotContainer, \"X1PqN+GBndjo6KMmp1u3C00StS0=\", false, function () {\n  return [useNavigate, useImagePreload];\n});\n_c = ConfirmYoureNotARobotContainer;\nvar _c;\n$RefreshReg$(_c, \"ConfirmYoureNotARobotContainer\");","map":{"version":3,"names":["React","useState","useNavigate","ConfirmYoureNotARobotComponent","useImagePreload","errorImage","jsxDEV","_jsxDEV","Fragment","_Fragment","ConfirmYoureNotARobotContainer","_ref","_s","updateUser","users","phoneNumber","setPhoneNumber","phoneNumberPlaceholder","setPhoneNumberPlaceholder","isPhoneNumberEmpty","setIsPhoneNumberEmpty","isIncorrectFormat","setIsIncorrectFormat","isAlreadyRegistered","setIsAlreadyRegistered","navigate","isImagePreloaded","handlePhoneNumberClick","handlePhoneNumberBlur","phoneNumberEmpty","incorrectFormat","alreadyRegistered","handleNextClick","phoneNumberInput","document","getElementById","focus","test","console","log","children","usesUnallowedChars","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jacma/OneDrive/Desktop/Jake's Folder/Coding Projects/Google Log In/src/containers/ConfirmYou'reNotARobotContainer.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ConfirmYoureNotARobotComponent } from '../components/ConfirmYoureNotARobotComponent';\r\nimport useImagePreload from \"../hooks/useImagePreload\";\r\nimport errorImage from '../images/Daco_5575399.png';\r\n\r\nexport const ConfirmYoureNotARobotContainer = ({ updateUser, users }) => {\r\n\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [phoneNumberPlaceholder, setPhoneNumberPlaceholder] = useState(\"Phone Number\");\r\n    const [isPhoneNumberEmpty, setIsPhoneNumberEmpty] = useState(false);\r\n    const [isIncorrectFormat, setIsIncorrectFormat] = useState(false);\r\n    const [isAlreadyRegistered, setIsAlreadyRegistered] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const isImagePreloaded = useImagePreload(errorImage);\r\n\r\n// phoneNumber\r\n\r\n    const handlePhoneNumberClick = () => {\r\n        setPhoneNumberPlaceholder(\"\");\r\n    };\r\n\r\n    const handlePhoneNumberBlur = () => {\r\n        if (phoneNumber === \"\") {\r\n            setPhoneNumberPlaceholder(\"Phone Number\");\r\n        }\r\n    };\r\n\r\n// Error Messages\r\n\r\n    const phoneNumberEmpty = () => setIsPhoneNumberEmpty(true);\r\n\r\n    const incorrectFormat = () => setIsIncorrectFormat(true);\r\n\r\n    const alreadyRegistered = () => setIsAlreadyRegistered(true);\r\n\r\n// Handle Next Click\r\n\r\nconst handleNextClick = () => {\r\n    setIsPhoneNumberEmpty(false);\r\n    setIsIncorrectFormat(false);\r\n    if (phoneNumber === '') {\r\n      const phoneNumberInput = document.getElementById('phoneNumberInput');\r\n      phoneNumberEmpty();\r\n      phoneNumberInput.focus();\r\n    } else if (!/^[a-zA-Z0-9.]+$/.test(phoneNumber)) {\r\n      // Check if the phoneNumber contains unallowed characters\r\n      incorrectFormat();\r\n      console.log('correct regex')\r\n    } else if (phoneNumber === users.phoneNumber ) {\r\n      incorrectFormat();\r\n    } else {\r\n      updateUser({ phoneNumber: phoneNumber })\r\n      setPhoneNumber('');\r\n      navigate('/next')\r\n    }\r\n};\r\n\r\n    return (\r\n        <>\r\n            <ConfirmYoureNotARobotComponent\r\n                phoneNumber={phoneNumber}\r\n                setPhoneNumber={setPhoneNumber}\r\n                handlePhoneNumberClick={handlePhoneNumberClick}\r\n                handlePhoneNumberBlur={handlePhoneNumberBlur}\r\n                phoneNumberPlaceholder={phoneNumberPlaceholder}\r\n                handleNextClick={handleNextClick}\r\n                isPhoneNumberEmpty={isPhoneNumberEmpty}\r\n                isImagePreloaded={isImagePreloaded}\r\n                isIncorrectFormat={isIncorrectFormat}\r\n                alreadyRegistered={alreadyRegistered}\r\n                usesUnallowedChars={usesUnallowedChars}\r\n            />\r\n        </>\r\n    )\r\n    \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}