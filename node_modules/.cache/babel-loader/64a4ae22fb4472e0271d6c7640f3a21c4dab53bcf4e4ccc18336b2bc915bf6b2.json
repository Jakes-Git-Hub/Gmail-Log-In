{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jacma\\\\OneDrive\\\\Desktop\\\\Jake's Folder\\\\Coding Projects\\\\Google Log In\\\\src\\\\containers\\\\CreatePasswordContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { CreatePasswordComponent } from \"../components/CreatePasswordComponent\";\nimport useImagePreload from \"../hooks/useImagePreload\";\nimport errorImage from '../images/Daco_5575399.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CreatePasswordContainer = _ref => {\n  _s();\n  let {\n    updateUser\n  } = _ref;\n  const [recoveryEmail, setRecoveryEmail] = useState(\"\");\n  const [recoveryEmailPlaceholder, setRecoveryEmailPlaceholder] = useState(\"Recovery email address\");\n  const [errorCondition, setErrorCondition] = useState(null);\n  const navigate = useNavigate();\n  const isImagePreloaded = useImagePreload(errorImage);\n\n  // Recovery Email\n\n  const handleRecoveryEmailClick = () => {\n    setRecoveryEmailPlaceholder(\"\");\n  };\n  const handleRecoveryEmailBlur = () => {\n    if (recoveryEmail === \"\") {\n      setRecoveryEmailPlaceholder(\"Recovery email address\");\n    }\n  };\n\n  // Error messages\n\n  // Handle Next\n\n  const handleNextClick = () => {\n    if (password === confirmPassword && password !== '' && confirmPassword !== '') {\n      updateUser({\n        password: password\n      });\n      setPassword('');\n      setConfirmPassword('');\n      setErrorCondition(null);\n      navigate('/add-recovery-email');\n    } else if (password === '' && confirmPassword === '') {\n      bothPasswordAndConfirmEmpty();\n      const passwordInput = document.getElementById('passwordInput');\n      if (passwordInput) {\n        passwordInput.focus();\n      }\n    } else if (password !== '' && confirmPassword === \"\") {\n      confirmYourPassword();\n      const confirmPasswordInput = document.getElementById('confirmPasswordInput');\n      if (confirmPasswordInput) {\n        confirmPasswordInput.focus();\n      }\n    } else if (password !== confirmPassword && password !== \"\" && confirmPassword !== '') {\n      passwordMismatch();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CreatePasswordComponent, {\n      recoveryEmail: recoveryEmail,\n      setPassword: setPassword,\n      confirmPassword: confirmPassword,\n      setConfirmPassword: setConfirmPassword,\n      passwordPlaceholder: passwordPlaceholder,\n      handlePasswordClick: handlePasswordClick,\n      handlePasswordBlur: handlePasswordBlur,\n      confirmPlaceholder: confirmPlaceholder,\n      handleConfirmClick: handleConfirmClick,\n      handleConfirmBlur: handleConfirmBlur,\n      handleNextClick: handleNextClick,\n      showPassword: showPassword,\n      setShowPassword: setShowPassword,\n      togglePassword: handleTogglePassword,\n      confirmYourPassword: confirmYourPassword,\n      passwordMismatch: passwordMismatch,\n      isImagePreloaded: isImagePreloaded,\n      errorCondition: errorCondition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(CreatePasswordContainer, \"YbmES65BUWczL6rrh8J+JfLV68I=\", false, function () {\n  return [useNavigate, useImagePreload];\n});\n_c = CreatePasswordContainer;\nvar _c;\n$RefreshReg$(_c, \"CreatePasswordContainer\");","map":{"version":3,"names":["React","useState","useNavigate","CreatePasswordComponent","useImagePreload","errorImage","jsxDEV","_jsxDEV","Fragment","_Fragment","CreatePasswordContainer","_ref","_s","updateUser","recoveryEmail","setRecoveryEmail","recoveryEmailPlaceholder","setRecoveryEmailPlaceholder","errorCondition","setErrorCondition","navigate","isImagePreloaded","handleRecoveryEmailClick","handleRecoveryEmailBlur","handleNextClick","password","confirmPassword","setPassword","setConfirmPassword","bothPasswordAndConfirmEmpty","passwordInput","document","getElementById","focus","confirmYourPassword","confirmPasswordInput","passwordMismatch","children","passwordPlaceholder","handlePasswordClick","handlePasswordBlur","confirmPlaceholder","handleConfirmClick","handleConfirmBlur","showPassword","setShowPassword","togglePassword","handleTogglePassword","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jacma/OneDrive/Desktop/Jake's Folder/Coding Projects/Google Log In/src/containers/CreatePasswordContainer.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { CreatePasswordComponent } from \"../components/CreatePasswordComponent\";\r\nimport useImagePreload from \"../hooks/useImagePreload\";\r\nimport errorImage from '../images/Daco_5575399.png';\r\n\r\nexport const CreatePasswordContainer = ({ updateUser }) => {\r\n\r\n    const [recoveryEmail, setRecoveryEmail] = useState(\"\");\r\n    const [recoveryEmailPlaceholder, setRecoveryEmailPlaceholder] = useState(\"Recovery email address\");\r\n    const [errorCondition, setErrorCondition] = useState(null);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const isImagePreloaded = useImagePreload(errorImage);\r\n    \r\n// Recovery Email\r\n\r\n    const handleRecoveryEmailClick = () => {\r\n        setRecoveryEmailPlaceholder(\"\");\r\n    };\r\n\r\n    const handleRecoveryEmailBlur = () => {\r\n        if (recoveryEmail === \"\") {\r\n            setRecoveryEmailPlaceholder(\"Recovery email address\"); \r\n        }\r\n    };\r\n\r\n// Error messages\r\n\r\n\r\n\r\n// Handle Next\r\n\r\n    const handleNextClick = () => {\r\n        if (password === confirmPassword && password !== '' && confirmPassword !== '') {\r\n        updateUser({ password: password });\r\n        setPassword('');\r\n        setConfirmPassword('');\r\n        setErrorCondition(null);\r\n        navigate('/add-recovery-email');\r\n        } else if (password === '' && confirmPassword === '') {\r\n            bothPasswordAndConfirmEmpty();\r\n            const passwordInput = document.getElementById('passwordInput');\r\n            if (passwordInput) {\r\n                passwordInput.focus();\r\n            }\r\n        } else if (password !== '' && confirmPassword === \"\") {\r\n            confirmYourPassword();\r\n            const confirmPasswordInput = document.getElementById('confirmPasswordInput');\r\n            if (confirmPasswordInput) {\r\n                confirmPasswordInput.focus();\r\n            }\r\n        } else if (password !== confirmPassword && password !== \"\" && confirmPassword !== '') {\r\n            passwordMismatch();\r\n        }\r\n    };\r\n\r\n return(\r\n    <>\r\n        <CreatePasswordComponent\r\n            recoveryEmail={recoveryEmail}\r\n            setPassword={setPassword}\r\n            confirmPassword={confirmPassword}\r\n            setConfirmPassword={setConfirmPassword}\r\n            passwordPlaceholder={passwordPlaceholder}\r\n            handlePasswordClick={handlePasswordClick}\r\n            handlePasswordBlur={handlePasswordBlur}\r\n            confirmPlaceholder={confirmPlaceholder}\r\n            handleConfirmClick={handleConfirmClick}\r\n            handleConfirmBlur={handleConfirmBlur}\r\n            handleNextClick={handleNextClick}\r\n            showPassword={showPassword}\r\n            setShowPassword={setShowPassword}\r\n            togglePassword={handleTogglePassword}\r\n            confirmYourPassword={confirmYourPassword}\r\n            passwordMismatch={passwordMismatch}\r\n            isImagePreloaded={isImagePreloaded}\r\n            errorCondition={errorCondition}\r\n        />\r\n    </>\r\n );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}