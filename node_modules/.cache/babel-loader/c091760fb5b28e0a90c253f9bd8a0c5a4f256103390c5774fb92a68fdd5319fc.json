{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jacma\\\\OneDrive\\\\Desktop\\\\Jake's Folder\\\\Coding Projects\\\\Google Log In\\\\src\\\\containers\\\\AddPhoneNumberContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AddPhoneNumberComponent } from '../components/AddPhoneNumberComponent';\nimport useImagePreload from \"../hooks/useImagePreload\";\nimport errorImage from '../images/Daco_5575399.png';\nimport { countries, customOptions } from '../utils/addPhoneNumberDropDownOptionsObject';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AddPhoneNumberContainer = _ref => {\n  _s();\n  let {\n    updateUser,\n    users,\n    userIP\n  } = _ref;\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [phoneNumberPlaceholder, setPhoneNumberPlaceholder] = useState(\"Phone Number\");\n  const [isPhoneNumberEmpty, setIsPhoneNumberEmpty] = useState(false);\n  const [isIncorrectFormat, setIsIncorrectFormat] = useState(false);\n  const [isAlreadyRegistered, setIsAlreadyRegistered] = useState(false);\n  const [errorCondition, setErrorCondition] = useState(null);\n  const [usersCountryFlagSVG, setUsersCountryFlagSVG] = useState('');\n  const navigate = useNavigate();\n\n  // Loads Error Image\n\n  const isImagePreloaded = useImagePreload(errorImage);\n\n  // Pre Load Flag SVGS\n\n  const preloadImages = images => {\n    images.forEach(image => {\n      const img = new Image();\n      img.src = image;\n    });\n  };\n  const flagImageUrls = countries.map(country => `../images/flags/${country.svg}`);\n  useEffect(() => {\n    preloadImages(flagImageUrls);\n  }, []);\n\n  // Get User's Country from IP and Set SVG Based on it\n\n  useEffect(() => {\n    if (userIP) {\n      const apiKey = 'b2ef0251b1264f88ae869467dfe144d8';\n      axios.get(`https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=userCountryFromIP`).then(response => {\n        const countryFromIP = response.data.country_name;\n        const matchingCountry = countries.find(country => country.name === countryFromIP);\n        if (matchingCountry) {\n          setUsersCountryFlagSVG(matchingCountry.svg);\n        }\n        console.log(`User's country: ${countryFromIP}`);\n      }).catch(error => {\n        console.error('Error fetching geolocation data:', error);\n      });\n    } else {\n      console.log(\"didn't work\");\n    }\n  }, [userIP]);\n\n  // phoneNumber\n\n  const handlePhoneNumberClick = () => {\n    setPhoneNumberPlaceholder(\"\");\n  };\n  const handlePhoneNumberBlur = () => {\n    if (phoneNumber === \"\") {\n      setPhoneNumberPlaceholder(\"Phone Number\");\n    }\n  };\n\n  // Error Messages\n\n  const phoneNumberEmpty = () => setIsPhoneNumberEmpty(true);\n  const incorrectFormat = () => setIsIncorrectFormat(true);\n  const alreadyRegistered = () => setIsAlreadyRegistered(true);\n\n  // Handle Next Click\n\n  const handleNextClick = () => {\n    setIsPhoneNumberEmpty(false);\n    setIsIncorrectFormat(false);\n    setIsAlreadyRegistered(false);\n    if (phoneNumber === '') {\n      const phoneNumberInput = document.getElementById('phoneNumberInput');\n      phoneNumberEmpty();\n      phoneNumberInput.focus();\n    } else if (!/^[a-zA-Z0-9.]+$/.test(phoneNumber)) {\n      // Check if the phoneNumber contains unallowed characters\n      incorrectFormat();\n      console.log('correct regex');\n    } else {\n      const isPhoneNumberAlreadyRegistered = users.some(user => user.phoneNumber === phoneNumber);\n      if (isPhoneNumberAlreadyRegistered) {\n        alreadyRegistered();\n      } else {\n        updateUser({\n          phoneNumber: phoneNumber\n        });\n        setPhoneNumber('');\n        navigate('/next');\n      }\n    }\n  };\n\n  // Custom React Select Styles\n\n  const customStyles = {\n    menu: styles => ({\n      ...styles,\n      width: '360px'\n    })\n  };\n\n  // Handle Skip\n\n  const handleSkip = () => {\n    setPhoneNumber('');\n    setErrorCondition(null);\n    navigate('/review-your-account-info');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AddPhoneNumberComponent, {\n      value: phoneNumber,\n      setValue: setPhoneNumber,\n      handlePhoneNumberClick: handlePhoneNumberClick,\n      handlePhoneNumberBlur: handlePhoneNumberBlur,\n      phoneNumberPlaceholder: phoneNumberPlaceholder,\n      handleNextClick: handleNextClick,\n      handleSkip: handleSkip,\n      isPhoneNumberEmpty: isPhoneNumberEmpty,\n      isImagePreloaded: isImagePreloaded,\n      isIncorrectFormat: isIncorrectFormat,\n      isAlreadyRegistered: isAlreadyRegistered,\n      customOptions: customOptions,\n      countries: countries,\n      customStyles: customStyles,\n      userIP: userIP,\n      usersCountryFlagSVG: usersCountryFlagSVG\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(AddPhoneNumberContainer, \"IbrS4vfSpyCdt8iK1uxeCf8AfGU=\", false, function () {\n  return [useNavigate, useImagePreload];\n});\n_c = AddPhoneNumberContainer;\nvar _c;\n$RefreshReg$(_c, \"AddPhoneNumberContainer\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","AddPhoneNumberComponent","useImagePreload","errorImage","countries","customOptions","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AddPhoneNumberContainer","_ref","_s","updateUser","users","userIP","phoneNumber","setPhoneNumber","phoneNumberPlaceholder","setPhoneNumberPlaceholder","isPhoneNumberEmpty","setIsPhoneNumberEmpty","isIncorrectFormat","setIsIncorrectFormat","isAlreadyRegistered","setIsAlreadyRegistered","errorCondition","setErrorCondition","usersCountryFlagSVG","setUsersCountryFlagSVG","navigate","isImagePreloaded","preloadImages","images","forEach","image","img","Image","src","flagImageUrls","map","country","svg","apiKey","get","then","response","countryFromIP","data","country_name","matchingCountry","find","name","console","log","catch","error","handlePhoneNumberClick","handlePhoneNumberBlur","phoneNumberEmpty","incorrectFormat","alreadyRegistered","handleNextClick","phoneNumberInput","document","getElementById","focus","test","isPhoneNumberAlreadyRegistered","some","user","customStyles","menu","styles","width","handleSkip","children","value","setValue","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jacma/OneDrive/Desktop/Jake's Folder/Coding Projects/Google Log In/src/containers/AddPhoneNumberContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AddPhoneNumberComponent } from '../components/AddPhoneNumberComponent';\r\nimport useImagePreload from \"../hooks/useImagePreload\";\r\nimport errorImage from '../images/Daco_5575399.png';\r\nimport { countries, customOptions } from '../utils/addPhoneNumberDropDownOptionsObject';\r\nimport axios from 'axios';\r\n\r\nexport const AddPhoneNumberContainer = ({ updateUser, users, userIP }) => {\r\n\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [phoneNumberPlaceholder, setPhoneNumberPlaceholder] = useState(\"Phone Number\");\r\n    const [isPhoneNumberEmpty, setIsPhoneNumberEmpty] = useState(false);\r\n    const [isIncorrectFormat, setIsIncorrectFormat] = useState(false);\r\n    const [isAlreadyRegistered, setIsAlreadyRegistered] = useState(false);\r\n    const [errorCondition, setErrorCondition] = useState(null);\r\n    const [usersCountryFlagSVG, setUsersCountryFlagSVG] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n// Loads Error Image\r\n\r\n    const isImagePreloaded = useImagePreload(errorImage);\r\n\r\n// Pre Load Flag SVGS\r\n\r\n    const preloadImages = images => {\r\n        images.forEach((image) => {\r\n        const img = new Image();\r\n        img.src = image;\r\n        });\r\n    }\r\n\r\n    const flagImageUrls = countries.map(country => (\r\n        `../images/flags/${country.svg}`\r\n    ));\r\n\r\n    useEffect(() => {\r\n        preloadImages(flagImageUrls);\r\n    }, []);\r\n\r\n// Get User's Country from IP and Set SVG Based on it\r\n\r\n    useEffect(() => {\r\n        if (userIP) {\r\n            const apiKey = 'b2ef0251b1264f88ae869467dfe144d8';\r\n\r\n            axios.get(`https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=userCountryFromIP`)\r\n            .then((response) => {\r\n                const countryFromIP = response.data.country_name;\r\n                const matchingCountry = countries.find(country => country.name === countryFromIP);\r\n                if (matchingCountry) {\r\n                    setUsersCountryFlagSVG(matchingCountry.svg);\r\n                }\r\n                console.log(`User's country: ${countryFromIP}`);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching geolocation data:', error);\r\n            });\r\n        } else {\r\n            console.log(\"didn't work\");\r\n        }\r\n    }, [userIP]);\r\n\r\n// phoneNumber\r\n\r\n    const handlePhoneNumberClick = () => {\r\n        setPhoneNumberPlaceholder(\"\");\r\n    };\r\n\r\n    const handlePhoneNumberBlur = () => {\r\n        if (phoneNumber === \"\") {\r\n            setPhoneNumberPlaceholder(\"Phone Number\");\r\n        }\r\n    };\r\n\r\n// Error Messages\r\n\r\n    const phoneNumberEmpty = () => setIsPhoneNumberEmpty(true);\r\n\r\n    const incorrectFormat = () => setIsIncorrectFormat(true);\r\n\r\n    const alreadyRegistered = () => setIsAlreadyRegistered(true);\r\n\r\n// Handle Next Click\r\n\r\n    const handleNextClick = () => {\r\n        setIsPhoneNumberEmpty(false);\r\n        setIsIncorrectFormat(false);\r\n        setIsAlreadyRegistered(false);\r\n        if (phoneNumber === '') {\r\n        const phoneNumberInput = document.getElementById('phoneNumberInput');\r\n        phoneNumberEmpty();\r\n        phoneNumberInput.focus();\r\n        } else if (!/^[a-zA-Z0-9.]+$/.test(phoneNumber)) {\r\n        // Check if the phoneNumber contains unallowed characters\r\n        incorrectFormat();\r\n        console.log('correct regex')\r\n        } else {\r\n                const isPhoneNumberAlreadyRegistered = users.some(user => user.phoneNumber === phoneNumber);\r\n                if(isPhoneNumberAlreadyRegistered) {\r\n                    alreadyRegistered();    \r\n                } else {\r\n            updateUser({ phoneNumber: phoneNumber })\r\n            setPhoneNumber('');\r\n            navigate('/next')\r\n            }\r\n        }\r\n    };\r\n\r\n// Custom React Select Styles\r\n\r\n    const customStyles = {\r\n        menu: (styles) => ({\r\n            ...styles,\r\n            width: '360px',                \r\n        }),\r\n    };\r\n\r\n\r\n// Handle Skip\r\n\r\n    const handleSkip = () => {\r\n        setPhoneNumber('');\r\n        setErrorCondition(null);\r\n        navigate('/review-your-account-info');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AddPhoneNumberComponent\r\n                value={phoneNumber}\r\n                setValue={setPhoneNumber}\r\n                handlePhoneNumberClick={handlePhoneNumberClick}\r\n                handlePhoneNumberBlur={handlePhoneNumberBlur}\r\n                phoneNumberPlaceholder={phoneNumberPlaceholder}\r\n                handleNextClick={handleNextClick}\r\n                handleSkip={handleSkip}\r\n                isPhoneNumberEmpty={isPhoneNumberEmpty}\r\n                isImagePreloaded={isImagePreloaded}\r\n                isIncorrectFormat={isIncorrectFormat}\r\n                isAlreadyRegistered={isAlreadyRegistered}\r\n                customOptions={customOptions}\r\n                countries={countries}\r\n                customStyles={customStyles}\r\n                userIP={userIP}\r\n                usersCountryFlagSVG={usersCountryFlagSVG}\r\n            />\r\n        </>\r\n    )\r\n    \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}